import { ConnectButton } from '@rainbow-me/rainbowkit';
import type { NextPage } from 'next';
import Head from 'next/head';
import styles from '../styles/Home.module.css';
import { useEffect, useState } from 'react';
import { useAccount } from 'wagmi';
import { abi } from '../abi';
import { readContract, writeContract } from '@wagmi/core'
import { config } from '../wagmi';
import { getRandomWord } from '../utils/randomWord';
import { keccak256, toBytes } from "viem";
import { tokenAbi } from '../tokenAbi';
import Grid from '../components/grid';
import Keyboard from '../components/keyboard';
import { keyboardState } from '../utils/keyboardState';

const TOKEN_ADDRESS = process.env.NEXT_PUBLIC_TOKEN_ADDRESS as `0x${string}`
const CONTRACT_ADDRESS = process.env.NEXT_PUBLIC_CONTRACT_ADDRESS as `0x${string}`

const ONE = BigInt(10**18);
const APPROVE_AMOUNT = BigInt(500) * ONE;
const MINT_AMOUNT = BigInt(5) * ONE;

const Home: NextPage = () => {
  const account = useAccount();
  const [word, setWord] = useState('');
  const [currentGuess, setCurrentGuess] = useState('');
  const [guesses, setGuesses] = useState<string[]>([])
  const [triesLeft, setTriesLeft] = useState(1);

  const setup = async () => {
  if (!account?.address) return;

  try {
    const randomWord = getRandomWord().toLowerCase();
    setWord(randomWord);

    const wallet = account.address as `0x${string}`;

    // 1) Approve once
    await writeContract(config, {
      address: TOKEN_ADDRESS,
      abi: tokenAbi,
      functionName: "approve",
      args: [CONTRACT_ADDRESS, APPROVE_AMOUNT],
    });

    // 2) Mint tokens to player
    await writeContract(config, {
      address: TOKEN_ADDRESS,
      abi: tokenAbi,
      functionName: "mintToken",
      args: [wallet, MINT_AMOUNT],
    });

    // 3) Start game 
    await writeContract(config, {
      address: CONTRACT_ADDRESS,
      abi: abi,
      functionName: "startGame",
      args: [wallet],
    });

    // 4) Set target word
    const hashWord = keccak256(toBytes(randomWord)) as `0x${string}`;
    await writeContract(config, {
      address: CONTRACT_ADDRESS,
      abi: abi,
      functionName: "setTargetWord",
      args: [hashWord],
    });

    await getTries();

  } catch (err: any) {
    console.error("setup failed", err);
    }
  };

  const getTries = async () => {
      const result = await readContract(config, {
        address: CONTRACT_ADDRESS as `0x${string}`,
        abi,
        functionName: "getTries",
        args: [account.address as `0x${string}`],
      });

      setTriesLeft(Number(result));
  };

  const handleKeyPress = async (key:string) => {
    if (guesses.length >= 5) return;

    if (key === 'enter') {
      if (currentGuess.length === 5) {
        setGuesses([...guesses,currentGuess])
        setCurrentGuess('')
        handleSubmit()
        await getTries();
        handleGameOver();
      } else{
        alert('Need to be a five letter word!')
      }

    } else if (key === 'backspace') {
      setCurrentGuess((prev) => prev.slice(0,-1))
    } else if (currentGuess.length < 5) {
      setCurrentGuess((prev) => prev + key.toLowerCase())
    }
  }

  const handleSubmit = async () => {
    if (!word) return;

    const normalizedGuess = currentGuess.trim().toLowerCase();
    const hashGuess = keccak256(toBytes(normalizedGuess)) as `0x${string}`;
    const wallet = account.address as `0x${string}`

    writeContract(config,{
        address: CONTRACT_ADDRESS,
        abi: abi,
        functionName: "tryGuess",
        args:[wallet,hashGuess]
    })

    setCurrentGuess('');
  };

  const keyState = keyboardState(guesses,word)

  const handleGameOver = () => {
    const normalizedGuess = currentGuess.trim().toLowerCase();

    if (normalizedGuess === word) {
      alert('Correct!');
      return;
    }

    if (triesLeft <= 0) {
      alert(`You lose! The word was "${word}".`);
      return;
    }
  }

  useEffect(() => {
  if (account && account.isConnected) {
    (async () => {
      await setup();
    })();
  } else {
    setWord("");
    setGuesses([]);
    setCurrentGuess("");
    setTriesLeft(0);
  }
}, [account]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Tokle</title>
        <meta
          content="Generated by @rainbow-me/create-rainbowkit"
          name="description"
        />
        <link href="/favicon.ico" rel="icon" />
      </Head>

    <main className={styles.main}>
      <ConnectButton />
      
      <h1 className={styles.title}>Welcome to Tokle!</h1>
      
      <p className={styles.description}>
        A <a href="https://www.nytimes.com/games/wordle/index.html">Wordle</a>{' '}
        like game with Web3!
      </p>
 
      {account.address === CONTRACT_ADDRESS && 
      <p>Daily word: {word ? word : 'Loading...'} (for testing)</p>
      }

      <Grid guesses={guesses} currentGuess={currentGuess} solution={word}/>
      <Keyboard states={keyState} onKeyPress={handleKeyPress}/>

      </main>

      <footer className={styles.footer}>
        <a href="https://rainbow.me" rel="noopener noreferrer" target="_blank">
          Made with ‚ù§Ô∏è by your frens at üåà
        </a>
      </footer>
    </div>
  );
};

export default Home;
