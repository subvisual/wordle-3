import { ConnectButton } from '@rainbow-me/rainbowkit';
import type { NextPage } from 'next';
import Head from 'next/head';
import styles from '../styles/Home.module.css';
import { useEffect, useState } from 'react';
import { useAccount } from 'wagmi';
import { abi } from '../abi';
import { readContract, writeContract } from '@wagmi/core'
import { config } from '../wagmi';
import { getRandomWord } from '../randomWord';
import { keccak256, toBytes } from "viem";

const CONTRACT_ADDRESS = '0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512';

const Home: NextPage = () => {
  const account = useAccount();
  const [word, setWord] = useState('');
  const [guess, setGuess] = useState('');
  const [message, setMessage] = useState('');
  const [triesLeft, setTriesLeft] = useState(1);
  const [gameOver, setGameOver] = useState(false);

  const setup = () =>{
    const randomWord = getRandomWord();
    setWord(randomWord)

    const wallet = account.address as `0x${string}`
    writeContract(config,{
        address: CONTRACT_ADDRESS,
        abi: abi,
        functionName: "startGame",
        args:[wallet]
    })

    const hashWord = keccak256(toBytes(word)) as `0x${string}`;
    writeContract(config,{
        address: CONTRACT_ADDRESS,
        abi: abi,
        functionName: "setTargetWord",
        args:[hashWord]
    })
  }

  const getTries = async () => {
      const result = await readContract(config, {
        address: CONTRACT_ADDRESS as `0x${string}`,
        abi,
        functionName: "getTries",
        args: [account.address as `0x${string}`],
      });

      setTriesLeft(result);
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!word || gameOver) return;

    const normalizedGuess = guess.trim().toLowerCase();
    const hashGuess = keccak256(toBytes(normalizedGuess)) as `0x${string}`;
    const wallet = account.address as `0x${string}`

    writeContract(config,{
        address: CONTRACT_ADDRESS,
        abi: abi,
        functionName: "tryGuess",
        args:[wallet,hashGuess]
    })

    if (normalizedGuess === word) {
      setMessage('Correct!');
      setGameOver(true);
      return;
    }

    getTries();

    if (triesLeft > 0) {
      setMessage(`Wrong! You have ${triesLeft} ${triesLeft === 1 ? 'try' : 'tries'} left.`);
    } else {
      setMessage(`You lose! The word was "${word}".`);
      setGameOver(true);
    }

    setGuess('');
  };

  useEffect(() => {
    if (account && account.isConnected) {
      setup();
      getTries();
    }
  }, [account]);

  const handleReset = () => {
    setup();
    getTries();
    setMessage('');
    setTriesLeft(1);
    setGameOver(false);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Tokle</title>
        <meta
          content="Generated by @rainbow-me/create-rainbowkit"
          name="description"
        />
        <link href="/favicon.ico" rel="icon" />
      </Head>

    <main className={styles.main}>
      <ConnectButton />
      
      <h1 className={styles.title}>Welcome to Tokle!</h1>
      
      <p className={styles.description}>
        A <a href="https://www.nytimes.com/games/wordle/index.html">Wordle</a>{' '}
        like game with Web3!
      </p>

      <p>Daily word: {word ? word : 'Loading...'} (for testing)</p>

      <form onSubmit={handleSubmit}>
        <input
          type="text"
          value={guess}
          onChange={(e) => setGuess(e.target.value)}
          placeholder="Enter your guess"
          className="guess-input"
          disabled={gameOver}
        />
        <button type="submit" className="guess-button" disabled={gameOver || !word}>
          Guess
        </button>
      </form>
      
      <p className="tries"> Tries left: {triesLeft}</p>

      <p className="message">{message}</p>

      {gameOver && (
        <button onClick={handleReset} className="reload-button">
          Try Again
        </button>
      )}
      </main>

      <footer className={styles.footer}>
        <a href="https://rainbow.me" rel="noopener noreferrer" target="_blank">
          Made with ‚ù§Ô∏è by your frens at üåà
        </a>
      </footer>
    </div>
  );
};

export default Home;

function randomWords() {
  throw new Error('Function not implemented.');
}

function toUtf8Bytes(word: string): import("js-sha3").Message {
  throw new Error('Function not implemented.');
}

